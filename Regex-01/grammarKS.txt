grammar grammarKS ;

SEMI : ';'  ;
COMMENT: ('/*' .*? '*/' | '//' ~[\n]*) -> skip ; 
WHILE : 'while'  ;
ELSE : 'else' ;
RETURN : 'return' ;
PRINT : 'print' ;
INPUT : 'input' ;
OPEN : 'open' ;
CLOSE : 'close' ;
READ : 'read' ;
WRITE : 'write' ;
LP : '(' ;
RP : ')' ;
IF : 'if' ;
CMA : ',' ;
LBR : '{' ;
RBR : '}' ;
NUM : [0-9]+ ;
OR : 'or' ;
AND : 'and' ;
NOT : 'not' ;
RELOP : '>=' | '<=' | '>' | '<' | '!=' | '==' ;
EQ : '=' ;
PLUS : '+' ;
MULOP : '*' | '/' | '%' ;
MINUS : '-' ;
TYPE : 'int'|'string'|'double' ;
STRING_CONSTANT : '"' ( '\\"' | ~["] )* '"';
ID : [A-Za-z0-9]+ ;
WHITESPACE : [ \t\r\n]+ -> skip ;

program : var_decl_list braceblock ;
var_decl_list : var_decl SEMI var_decl_list | ;
var_decl : TYPE ID ;
stmts : stmt stmts |  ;
stmt : func_call SEMI | cond | loop | return_stmt SEMI | assign SEMI ;
assign : ID EQ expr ;
loop : WHILE LP expr RP braceblock ;
cond : IF LP expr RP braceblock | IF LP expr RP braceblock ELSE braceblock ;
braceblock : LBR stmts RBR ;
expr : orexp ;
orexp : orexp OR andexp | andexp ;
andexp : andexp AND notexp | notexp ;
notexp : NOT notexp | rel ;
rel : sum RELOP sum | sum ;
sum : sum PLUS term | sum MINUS term | term ;
term : term MULOP neg | neg ;
neg : MINUS neg | factor ;
factor : NUM | LP expr RP | STRING_CONSTANT | ID | func_call;
return_stmt : RETURN expr ;
func_call : builtin_func_call ;
builtin_func_call : PRINT LP expr RP | INPUT LP RP | OPEN LP expr RP | READ LP expr RP | WRITE LP expr CMA expr RP | CLOSE LP expr RP;