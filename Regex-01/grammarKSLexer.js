// Generated from grammarKS.txt by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');



var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0002\u0018\u009a\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0005",
    "\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\u000b",
    "\u0006\u000bP\n\u000b\r\u000b\u000e\u000bQ\u0003\f\u0003\f\u0003\f\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000fh\n\u000f\u0003",
    "\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003",
    "\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0081",
    "\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0007\u0015\u0088\n\u0015\f\u0015\u000e\u0015\u008b\u000b\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0016\u0006\u0016\u0090\n\u0016\r\u0016\u000e",
    "\u0016\u0091\u0003\u0017\u0006\u0017\u0095\n\u0017\r\u0017\u000e\u0017",
    "\u0096\u0003\u0017\u0003\u0017\u0002\u0002\u0018\u0003\u0003\u0005\u0004",
    "\u0007\u0005\t\u0006\u000b\u0007\r\b\u000f\t\u0011\n\u0013\u000b\u0015",
    "\f\u0017\r\u0019\u000e\u001b\u000f\u001d\u0010\u001f\u0011!\u0012#\u0013",
    "%\u0014\'\u0015)\u0016+\u0017-\u0018\u0003\u0002\b\u0003\u00022;\u0004",
    "\u0002>>@@\u0005\u0002\'\',,11\u0003\u0002$$\u0004\u0002C\\c|\u0005",
    "\u0002\u000b\f\u000f\u000f\"\"\u0002\u00a4\u0002\u0003\u0003\u0002\u0002",
    "\u0002\u0002\u0005\u0003\u0002\u0002\u0002\u0002\u0007\u0003\u0002\u0002",
    "\u0002\u0002\t\u0003\u0002\u0002\u0002\u0002\u000b\u0003\u0002\u0002",
    "\u0002\u0002\r\u0003\u0002\u0002\u0002\u0002\u000f\u0003\u0002\u0002",
    "\u0002\u0002\u0011\u0003\u0002\u0002\u0002\u0002\u0013\u0003\u0002\u0002",
    "\u0002\u0002\u0015\u0003\u0002\u0002\u0002\u0002\u0017\u0003\u0002\u0002",
    "\u0002\u0002\u0019\u0003\u0002\u0002\u0002\u0002\u001b\u0003\u0002\u0002",
    "\u0002\u0002\u001d\u0003\u0002\u0002\u0002\u0002\u001f\u0003\u0002\u0002",
    "\u0002\u0002!\u0003\u0002\u0002\u0002\u0002#\u0003\u0002\u0002\u0002",
    "\u0002%\u0003\u0002\u0002\u0002\u0002\'\u0003\u0002\u0002\u0002\u0002",
    ")\u0003\u0002\u0002\u0002\u0002+\u0003\u0002\u0002\u0002\u0002-\u0003",
    "\u0002\u0002\u0002\u0003/\u0003\u0002\u0002\u0002\u00051\u0003\u0002",
    "\u0002\u0002\u00077\u0003\u0002\u0002\u0002\t9\u0003\u0002\u0002\u0002",
    "\u000b;\u0003\u0002\u0002\u0002\r>\u0003\u0002\u0002\u0002\u000fC\u0003",
    "\u0002\u0002\u0002\u0011J\u0003\u0002\u0002\u0002\u0013L\u0003\u0002",
    "\u0002\u0002\u0015O\u0003\u0002\u0002\u0002\u0017S\u0003\u0002\u0002",
    "\u0002\u0019V\u0003\u0002\u0002\u0002\u001bZ\u0003\u0002\u0002\u0002",
    "\u001dg\u0003\u0002\u0002\u0002\u001fi\u0003\u0002\u0002\u0002!k\u0003",
    "\u0002\u0002\u0002#m\u0003\u0002\u0002\u0002%o\u0003\u0002\u0002\u0002",
    "\'\u0080\u0003\u0002\u0002\u0002)\u0082\u0003\u0002\u0002\u0002+\u008f",
    "\u0003\u0002\u0002\u0002-\u0094\u0003\u0002\u0002\u0002/0\u0007=\u0002",
    "\u00020\u0004\u0003\u0002\u0002\u000212\u0007y\u0002\u000223\u0007j",
    "\u0002\u000234\u0007k\u0002\u000245\u0007n\u0002\u000256\u0007g\u0002",
    "\u00026\u0006\u0003\u0002\u0002\u000278\u0007*\u0002\u00028\b\u0003",
    "\u0002\u0002\u00029:\u0007+\u0002\u0002:\n\u0003\u0002\u0002\u0002;",
    "<\u0007k\u0002\u0002<=\u0007h\u0002\u0002=\f\u0003\u0002\u0002\u0002",
    ">?\u0007g\u0002\u0002?@\u0007n\u0002\u0002@A\u0007u\u0002\u0002AB\u0007",
    "g\u0002\u0002B\u000e\u0003\u0002\u0002\u0002CD\u0007t\u0002\u0002DE",
    "\u0007g\u0002\u0002EF\u0007v\u0002\u0002FG\u0007w\u0002\u0002GH\u0007",
    "t\u0002\u0002HI\u0007p\u0002\u0002I\u0010\u0003\u0002\u0002\u0002JK",
    "\u0007}\u0002\u0002K\u0012\u0003\u0002\u0002\u0002LM\u0007\u007f\u0002",
    "\u0002M\u0014\u0003\u0002\u0002\u0002NP\t\u0002\u0002\u0002ON\u0003",
    "\u0002\u0002\u0002PQ\u0003\u0002\u0002\u0002QO\u0003\u0002\u0002\u0002",
    "QR\u0003\u0002\u0002\u0002R\u0016\u0003\u0002\u0002\u0002ST\u0007q\u0002",
    "\u0002TU\u0007t\u0002\u0002U\u0018\u0003\u0002\u0002\u0002VW\u0007c",
    "\u0002\u0002WX\u0007p\u0002\u0002XY\u0007f\u0002\u0002Y\u001a\u0003",
    "\u0002\u0002\u0002Z[\u0007p\u0002\u0002[\\\u0007q\u0002\u0002\\]\u0007",
    "v\u0002\u0002]\u001c\u0003\u0002\u0002\u0002^_\u0007@\u0002\u0002_h",
    "\u0007?\u0002\u0002`a\u0007>\u0002\u0002ah\u0007?\u0002\u0002bh\t\u0003",
    "\u0002\u0002cd\u0007#\u0002\u0002dh\u0007?\u0002\u0002ef\u0007?\u0002",
    "\u0002fh\u0007?\u0002\u0002g^\u0003\u0002\u0002\u0002g`\u0003\u0002",
    "\u0002\u0002gb\u0003\u0002\u0002\u0002gc\u0003\u0002\u0002\u0002ge\u0003",
    "\u0002\u0002\u0002h\u001e\u0003\u0002\u0002\u0002ij\u0007?\u0002\u0002",
    "j \u0003\u0002\u0002\u0002kl\u0007-\u0002\u0002l\"\u0003\u0002\u0002",
    "\u0002mn\t\u0004\u0002\u0002n$\u0003\u0002\u0002\u0002op\u0007/\u0002",
    "\u0002p&\u0003\u0002\u0002\u0002qr\u0007k\u0002\u0002rs\u0007p\u0002",
    "\u0002s\u0081\u0007v\u0002\u0002tu\u0007u\u0002\u0002uv\u0007v\u0002",
    "\u0002vw\u0007t\u0002\u0002wx\u0007k\u0002\u0002xy\u0007p\u0002\u0002",
    "y\u0081\u0007i\u0002\u0002z{\u0007f\u0002\u0002{|\u0007q\u0002\u0002",
    "|}\u0007w\u0002\u0002}~\u0007d\u0002\u0002~\u007f\u0007n\u0002\u0002",
    "\u007f\u0081\u0007g\u0002\u0002\u0080q\u0003\u0002\u0002\u0002\u0080",
    "t\u0003\u0002\u0002\u0002\u0080z\u0003\u0002\u0002\u0002\u0081(\u0003",
    "\u0002\u0002\u0002\u0082\u0089\u0007$\u0002\u0002\u0083\u0084\u0007",
    "1\u0002\u0002\u0084\u0085\u00071\u0002\u0002\u0085\u0088\u0007$\u0002",
    "\u0002\u0086\u0088\n\u0005\u0002\u0002\u0087\u0083\u0003\u0002\u0002",
    "\u0002\u0087\u0086\u0003\u0002\u0002\u0002\u0088\u008b\u0003\u0002\u0002",
    "\u0002\u0089\u0087\u0003\u0002\u0002\u0002\u0089\u008a\u0003\u0002\u0002",
    "\u0002\u008a\u008c\u0003\u0002\u0002\u0002\u008b\u0089\u0003\u0002\u0002",
    "\u0002\u008c\u008d\u0007$\u0002\u0002\u008d*\u0003\u0002\u0002\u0002",
    "\u008e\u0090\t\u0006\u0002\u0002\u008f\u008e\u0003\u0002\u0002\u0002",
    "\u0090\u0091\u0003\u0002\u0002\u0002\u0091\u008f\u0003\u0002\u0002\u0002",
    "\u0091\u0092\u0003\u0002\u0002\u0002\u0092,\u0003\u0002\u0002\u0002",
    "\u0093\u0095\t\u0007\u0002\u0002\u0094\u0093\u0003\u0002\u0002\u0002",
    "\u0095\u0096\u0003\u0002\u0002\u0002\u0096\u0094\u0003\u0002\u0002\u0002",
    "\u0096\u0097\u0003\u0002\u0002\u0002\u0097\u0098\u0003\u0002\u0002\u0002",
    "\u0098\u0099\b\u0017\u0002\u0002\u0099.\u0003\u0002\u0002\u0002\n\u0002",
    "Qg\u0080\u0087\u0089\u0091\u0096\u0003\b\u0002\u0002"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function grammarKSLexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

grammarKSLexer.prototype = Object.create(antlr4.Lexer.prototype);
grammarKSLexer.prototype.constructor = grammarKSLexer;

Object.defineProperty(grammarKSLexer.prototype, "atn", {
        get : function() {
                return atn;
        }
});

grammarKSLexer.EOF = antlr4.Token.EOF;
grammarKSLexer.SEMI = 1;
grammarKSLexer.WHILE = 2;
grammarKSLexer.LP = 3;
grammarKSLexer.RP = 4;
grammarKSLexer.IF = 5;
grammarKSLexer.ELSE = 6;
grammarKSLexer.RETURN = 7;
grammarKSLexer.LBR = 8;
grammarKSLexer.RBR = 9;
grammarKSLexer.NUM = 10;
grammarKSLexer.OR = 11;
grammarKSLexer.AND = 12;
grammarKSLexer.NOT = 13;
grammarKSLexer.RELOP = 14;
grammarKSLexer.EQ = 15;
grammarKSLexer.PLUS = 16;
grammarKSLexer.MULOP = 17;
grammarKSLexer.MINUS = 18;
grammarKSLexer.TYPE = 19;
grammarKSLexer.STRING_CONSTANT = 20;
grammarKSLexer.ID = 21;
grammarKSLexer.WHITESPACE = 22;

grammarKSLexer.prototype.channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];

grammarKSLexer.prototype.modeNames = [ "DEFAULT_MODE" ];

grammarKSLexer.prototype.literalNames = [ null, "';'", "'while'", "'('", 
                                          "')'", "'if'", "'else'", "'return'", 
                                          "'{'", "'}'", null, "'or'", "'and'", 
                                          "'not'", null, "'='", "'+'", null, 
                                          "'-'" ];

grammarKSLexer.prototype.symbolicNames = [ null, "SEMI", "WHILE", "LP", 
                                           "RP", "IF", "ELSE", "RETURN", 
                                           "LBR", "RBR", "NUM", "OR", "AND", 
                                           "NOT", "RELOP", "EQ", "PLUS", 
                                           "MULOP", "MINUS", "TYPE", "STRING_CONSTANT", 
                                           "ID", "WHITESPACE" ];

grammarKSLexer.prototype.ruleNames = [ "SEMI", "WHILE", "LP", "RP", "IF", 
                                       "ELSE", "RETURN", "LBR", "RBR", "NUM", 
                                       "OR", "AND", "NOT", "RELOP", "EQ", 
                                       "PLUS", "MULOP", "MINUS", "TYPE", 
                                       "STRING_CONSTANT", "ID", "WHITESPACE" ];

grammarKSLexer.prototype.grammarFileName = "grammarKS.txt";


exports.grammarKSLexer = grammarKSLexer;

