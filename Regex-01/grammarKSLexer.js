// Generated from grammarKS.txt by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');



var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0002 \u00e5\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0003\u0002\u0003\u0002\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0007\u0003F\n\u0003\f\u0003\u000e\u0003",
    "I\u000b\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0007\u0003Q\n\u0003\f\u0003\u000e\u0003T\u000b\u0003",
    "\u0005\u0003V\n\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005",
    "\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012",
    "\u0003\u0013\u0006\u0013\u009c\n\u0013\r\u0013\u000e\u0013\u009d\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0005\u0017\u00b4\n\u0017\u0003\u0018\u0003\u0018",
    "\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u00cd\n\u001c\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u00d3\n\u001d",
    "\f\u001d\u000e\u001d\u00d6\u000b\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001e\u0006\u001e\u00db\n\u001e\r\u001e\u000e\u001e\u00dc\u0003\u001f",
    "\u0006\u001f\u00e0\n\u001f\r\u001f\u000e\u001f\u00e1\u0003\u001f\u0003",
    "\u001f\u0003G\u0002 \u0003\u0003\u0005\u0004\u0007\u0005\t\u0006\u000b",
    "\u0007\r\b\u000f\t\u0011\n\u0013\u000b\u0015\f\u0017\r\u0019\u000e\u001b",
    "\u000f\u001d\u0010\u001f\u0011!\u0012#\u0013%\u0014\'\u0015)\u0016+",
    "\u0017-\u0018/\u00191\u001a3\u001b5\u001c7\u001d9\u001e;\u001f= \u0003",
    "\u0002\t\u0003\u0002\f\f\u0003\u00022;\u0004\u0002>>@@\u0005\u0002\'",
    "\',,11\u0003\u0002$$\u0005\u00022;C\\c|\u0005\u0002\u000b\f\u000f\u000f",
    "\"\"\u0002\u00f2\u0002\u0003\u0003\u0002\u0002\u0002\u0002\u0005\u0003",
    "\u0002\u0002\u0002\u0002\u0007\u0003\u0002\u0002\u0002\u0002\t\u0003",
    "\u0002\u0002\u0002\u0002\u000b\u0003\u0002\u0002\u0002\u0002\r\u0003",
    "\u0002\u0002\u0002\u0002\u000f\u0003\u0002\u0002\u0002\u0002\u0011\u0003",
    "\u0002\u0002\u0002\u0002\u0013\u0003\u0002\u0002\u0002\u0002\u0015\u0003",
    "\u0002\u0002\u0002\u0002\u0017\u0003\u0002\u0002\u0002\u0002\u0019\u0003",
    "\u0002\u0002\u0002\u0002\u001b\u0003\u0002\u0002\u0002\u0002\u001d\u0003",
    "\u0002\u0002\u0002\u0002\u001f\u0003\u0002\u0002\u0002\u0002!\u0003",
    "\u0002\u0002\u0002\u0002#\u0003\u0002\u0002\u0002\u0002%\u0003\u0002",
    "\u0002\u0002\u0002\'\u0003\u0002\u0002\u0002\u0002)\u0003\u0002\u0002",
    "\u0002\u0002+\u0003\u0002\u0002\u0002\u0002-\u0003\u0002\u0002\u0002",
    "\u0002/\u0003\u0002\u0002\u0002\u00021\u0003\u0002\u0002\u0002\u0002",
    "3\u0003\u0002\u0002\u0002\u00025\u0003\u0002\u0002\u0002\u00027\u0003",
    "\u0002\u0002\u0002\u00029\u0003\u0002\u0002\u0002\u0002;\u0003\u0002",
    "\u0002\u0002\u0002=\u0003\u0002\u0002\u0002\u0003?\u0003\u0002\u0002",
    "\u0002\u0005U\u0003\u0002\u0002\u0002\u0007Y\u0003\u0002\u0002\u0002",
    "\t_\u0003\u0002\u0002\u0002\u000ba\u0003\u0002\u0002\u0002\rc\u0003",
    "\u0002\u0002\u0002\u000ff\u0003\u0002\u0002\u0002\u0011k\u0003\u0002",
    "\u0002\u0002\u0013r\u0003\u0002\u0002\u0002\u0015x\u0003\u0002\u0002",
    "\u0002\u0017~\u0003\u0002\u0002\u0002\u0019\u0083\u0003\u0002\u0002",
    "\u0002\u001b\u0089\u0003\u0002\u0002\u0002\u001d\u008e\u0003\u0002\u0002",
    "\u0002\u001f\u0094\u0003\u0002\u0002\u0002!\u0096\u0003\u0002\u0002",
    "\u0002#\u0098\u0003\u0002\u0002\u0002%\u009b\u0003\u0002\u0002\u0002",
    "\'\u009f\u0003\u0002\u0002\u0002)\u00a2\u0003\u0002\u0002\u0002+\u00a6",
    "\u0003\u0002\u0002\u0002-\u00b3\u0003\u0002\u0002\u0002/\u00b5\u0003",
    "\u0002\u0002\u00021\u00b7\u0003\u0002\u0002\u00023\u00b9\u0003\u0002",
    "\u0002\u00025\u00bb\u0003\u0002\u0002\u00027\u00cc\u0003\u0002\u0002",
    "\u00029\u00ce\u0003\u0002\u0002\u0002;\u00da\u0003\u0002\u0002\u0002",
    "=\u00df\u0003\u0002\u0002\u0002?@\u0007=\u0002\u0002@\u0004\u0003\u0002",
    "\u0002\u0002AB\u00071\u0002\u0002BC\u0007,\u0002\u0002CG\u0003\u0002",
    "\u0002\u0002DF\u000b\u0002\u0002\u0002ED\u0003\u0002\u0002\u0002FI\u0003",
    "\u0002\u0002\u0002GH\u0003\u0002\u0002\u0002GE\u0003\u0002\u0002\u0002",
    "HJ\u0003\u0002\u0002\u0002IG\u0003\u0002\u0002\u0002JK\u0007,\u0002",
    "\u0002KV\u00071\u0002\u0002LM\u00071\u0002\u0002MN\u00071\u0002\u0002",
    "NR\u0003\u0002\u0002\u0002OQ\n\u0002\u0002\u0002PO\u0003\u0002\u0002",
    "\u0002QT\u0003\u0002\u0002\u0002RP\u0003\u0002\u0002\u0002RS\u0003\u0002",
    "\u0002\u0002SV\u0003\u0002\u0002\u0002TR\u0003\u0002\u0002\u0002UA\u0003",
    "\u0002\u0002\u0002UL\u0003\u0002\u0002\u0002VW\u0003\u0002\u0002\u0002",
    "WX\b\u0003\u0002\u0002X\u0006\u0003\u0002\u0002\u0002YZ\u0007y\u0002",
    "\u0002Z[\u0007j\u0002\u0002[\\\u0007k\u0002\u0002\\]\u0007n\u0002\u0002",
    "]^\u0007g\u0002\u0002^\b\u0003\u0002\u0002\u0002_`\u0007*\u0002\u0002",
    "`\n\u0003\u0002\u0002\u0002ab\u0007+\u0002\u0002b\f\u0003\u0002\u0002",
    "\u0002cd\u0007k\u0002\u0002de\u0007h\u0002\u0002e\u000e\u0003\u0002",
    "\u0002\u0002fg\u0007g\u0002\u0002gh\u0007n\u0002\u0002hi\u0007u\u0002",
    "\u0002ij\u0007g\u0002\u0002j\u0010\u0003\u0002\u0002\u0002kl\u0007t",
    "\u0002\u0002lm\u0007g\u0002\u0002mn\u0007v\u0002\u0002no\u0007w\u0002",
    "\u0002op\u0007t\u0002\u0002pq\u0007p\u0002\u0002q\u0012\u0003\u0002",
    "\u0002\u0002rs\u0007r\u0002\u0002st\u0007t\u0002\u0002tu\u0007k\u0002",
    "\u0002uv\u0007p\u0002\u0002vw\u0007v\u0002\u0002w\u0014\u0003\u0002",
    "\u0002\u0002xy\u0007k\u0002\u0002yz\u0007p\u0002\u0002z{\u0007r\u0002",
    "\u0002{|\u0007w\u0002\u0002|}\u0007v\u0002\u0002}\u0016\u0003\u0002",
    "\u0002\u0002~\u007f\u0007q\u0002\u0002\u007f\u0080\u0007r\u0002\u0002",
    "\u0080\u0081\u0007g\u0002\u0002\u0081\u0082\u0007p\u0002\u0002\u0082",
    "\u0018\u0003\u0002\u0002\u0002\u0083\u0084\u0007e\u0002\u0002\u0084",
    "\u0085\u0007n\u0002\u0002\u0085\u0086\u0007q\u0002\u0002\u0086\u0087",
    "\u0007u\u0002\u0002\u0087\u0088\u0007g\u0002\u0002\u0088\u001a\u0003",
    "\u0002\u0002\u0002\u0089\u008a\u0007t\u0002\u0002\u008a\u008b\u0007",
    "g\u0002\u0002\u008b\u008c\u0007c\u0002\u0002\u008c\u008d\u0007f\u0002",
    "\u0002\u008d\u001c\u0003\u0002\u0002\u0002\u008e\u008f\u0007y\u0002",
    "\u0002\u008f\u0090\u0007t\u0002\u0002\u0090\u0091\u0007k\u0002\u0002",
    "\u0091\u0092\u0007v\u0002\u0002\u0092\u0093\u0007g\u0002\u0002\u0093",
    "\u001e\u0003\u0002\u0002\u0002\u0094\u0095\u0007.\u0002\u0002\u0095",
    " \u0003\u0002\u0002\u0002\u0096\u0097\u0007}\u0002\u0002\u0097\"\u0003",
    "\u0002\u0002\u0002\u0098\u0099\u0007\u007f\u0002\u0002\u0099$\u0003",
    "\u0002\u0002\u0002\u009a\u009c\t\u0003\u0002\u0002\u009b\u009a\u0003",
    "\u0002\u0002\u0002\u009c\u009d\u0003\u0002\u0002\u0002\u009d\u009b\u0003",
    "\u0002\u0002\u0002\u009d\u009e\u0003\u0002\u0002\u0002\u009e&\u0003",
    "\u0002\u0002\u0002\u009f\u00a0\u0007q\u0002\u0002\u00a0\u00a1\u0007",
    "t\u0002\u0002\u00a1(\u0003\u0002\u0002\u0002\u00a2\u00a3\u0007c\u0002",
    "\u0002\u00a3\u00a4\u0007p\u0002\u0002\u00a4\u00a5\u0007f\u0002\u0002",
    "\u00a5*\u0003\u0002\u0002\u0002\u00a6\u00a7\u0007p\u0002\u0002\u00a7",
    "\u00a8\u0007q\u0002\u0002\u00a8\u00a9\u0007v\u0002\u0002\u00a9,\u0003",
    "\u0002\u0002\u0002\u00aa\u00ab\u0007@\u0002\u0002\u00ab\u00b4\u0007",
    "?\u0002\u0002\u00ac\u00ad\u0007>\u0002\u0002\u00ad\u00b4\u0007?\u0002",
    "\u0002\u00ae\u00b4\t\u0004\u0002\u0002\u00af\u00b0\u0007#\u0002\u0002",
    "\u00b0\u00b4\u0007?\u0002\u0002\u00b1\u00b2\u0007?\u0002\u0002\u00b2",
    "\u00b4\u0007?\u0002\u0002\u00b3\u00aa\u0003\u0002\u0002\u0002\u00b3",
    "\u00ac\u0003\u0002\u0002\u0002\u00b3\u00ae\u0003\u0002\u0002\u0002\u00b3",
    "\u00af\u0003\u0002\u0002\u0002\u00b3\u00b1\u0003\u0002\u0002\u0002\u00b4",
    ".\u0003\u0002\u0002\u0002\u00b5\u00b6\u0007?\u0002\u0002\u00b60\u0003",
    "\u0002\u0002\u0002\u00b7\u00b8\u0007-\u0002\u0002\u00b82\u0003\u0002",
    "\u0002\u0002\u00b9\u00ba\t\u0005\u0002\u0002\u00ba4\u0003\u0002\u0002",
    "\u0002\u00bb\u00bc\u0007/\u0002\u0002\u00bc6\u0003\u0002\u0002\u0002",
    "\u00bd\u00be\u0007k\u0002\u0002\u00be\u00bf\u0007p\u0002\u0002\u00bf",
    "\u00cd\u0007v\u0002\u0002\u00c0\u00c1\u0007u\u0002\u0002\u00c1\u00c2",
    "\u0007v\u0002\u0002\u00c2\u00c3\u0007t\u0002\u0002\u00c3\u00c4\u0007",
    "k\u0002\u0002\u00c4\u00c5\u0007p\u0002\u0002\u00c5\u00cd\u0007i\u0002",
    "\u0002\u00c6\u00c7\u0007f\u0002\u0002\u00c7\u00c8\u0007q\u0002\u0002",
    "\u00c8\u00c9\u0007w\u0002\u0002\u00c9\u00ca\u0007d\u0002\u0002\u00ca",
    "\u00cb\u0007n\u0002\u0002\u00cb\u00cd\u0007g\u0002\u0002\u00cc\u00bd",
    "\u0003\u0002\u0002\u0002\u00cc\u00c0\u0003\u0002\u0002\u0002\u00cc\u00c6",
    "\u0003\u0002\u0002\u0002\u00cd8\u0003\u0002\u0002\u0002\u00ce\u00d4",
    "\u0007$\u0002\u0002\u00cf\u00d0\u0007^\u0002\u0002\u00d0\u00d3\u0007",
    "$\u0002\u0002\u00d1\u00d3\n\u0006\u0002\u0002\u00d2\u00cf\u0003\u0002",
    "\u0002\u0002\u00d2\u00d1\u0003\u0002\u0002\u0002\u00d3\u00d6\u0003\u0002",
    "\u0002\u0002\u00d4\u00d2\u0003\u0002\u0002\u0002\u00d4\u00d5\u0003\u0002",
    "\u0002\u0002\u00d5\u00d7\u0003\u0002\u0002\u0002\u00d6\u00d4\u0003\u0002",
    "\u0002\u0002\u00d7\u00d8\u0007$\u0002\u0002\u00d8:\u0003\u0002\u0002",
    "\u0002\u00d9\u00db\t\u0007\u0002\u0002\u00da\u00d9\u0003\u0002\u0002",
    "\u0002\u00db\u00dc\u0003\u0002\u0002\u0002\u00dc\u00da\u0003\u0002\u0002",
    "\u0002\u00dc\u00dd\u0003\u0002\u0002\u0002\u00dd<\u0003\u0002\u0002",
    "\u0002\u00de\u00e0\t\b\u0002\u0002\u00df\u00de\u0003\u0002\u0002\u0002",
    "\u00e0\u00e1\u0003\u0002\u0002\u0002\u00e1\u00df\u0003\u0002\u0002\u0002",
    "\u00e1\u00e2\u0003\u0002\u0002\u0002\u00e2\u00e3\u0003\u0002\u0002\u0002",
    "\u00e3\u00e4\b\u001f\u0002\u0002\u00e4>\u0003\u0002\u0002\u0002\r\u0002",
    "GRU\u009d\u00b3\u00cc\u00d2\u00d4\u00dc\u00e1\u0003\b\u0002\u0002"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function grammarKSLexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

grammarKSLexer.prototype = Object.create(antlr4.Lexer.prototype);
grammarKSLexer.prototype.constructor = grammarKSLexer;

Object.defineProperty(grammarKSLexer.prototype, "atn", {
        get : function() {
                return atn;
        }
});

grammarKSLexer.EOF = antlr4.Token.EOF;
grammarKSLexer.SEMI = 1;
grammarKSLexer.COMMENT = 2;
grammarKSLexer.WHILE = 3;
grammarKSLexer.LP = 4;
grammarKSLexer.RP = 5;
grammarKSLexer.IF = 6;
grammarKSLexer.ELSE = 7;
grammarKSLexer.RETURN = 8;
grammarKSLexer.PRINT = 9;
grammarKSLexer.INPUT = 10;
grammarKSLexer.OPEN = 11;
grammarKSLexer.CLOSE = 12;
grammarKSLexer.READ = 13;
grammarKSLexer.WRITE = 14;
grammarKSLexer.CMA = 15;
grammarKSLexer.LBR = 16;
grammarKSLexer.RBR = 17;
grammarKSLexer.NUM = 18;
grammarKSLexer.OR = 19;
grammarKSLexer.AND = 20;
grammarKSLexer.NOT = 21;
grammarKSLexer.RELOP = 22;
grammarKSLexer.EQ = 23;
grammarKSLexer.PLUS = 24;
grammarKSLexer.MULOP = 25;
grammarKSLexer.MINUS = 26;
grammarKSLexer.TYPE = 27;
grammarKSLexer.STRING_CONSTANT = 28;
grammarKSLexer.ID = 29;
grammarKSLexer.WHITESPACE = 30;

grammarKSLexer.prototype.channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];

grammarKSLexer.prototype.modeNames = [ "DEFAULT_MODE" ];

grammarKSLexer.prototype.literalNames = [ null, "';'", null, "'while'", 
                                          "'('", "')'", "'if'", "'else'", 
                                          "'return'", "'print'", "'input'", 
                                          "'open'", "'close'", "'read'", 
                                          "'write'", "','", "'{'", "'}'", 
                                          null, "'or'", "'and'", "'not'", 
                                          null, "'='", "'+'", null, "'-'" ];

grammarKSLexer.prototype.symbolicNames = [ null, "SEMI", "COMMENT", "WHILE", 
                                           "LP", "RP", "IF", "ELSE", "RETURN", 
                                           "PRINT", "INPUT", "OPEN", "CLOSE", 
                                           "READ", "WRITE", "CMA", "LBR", 
                                           "RBR", "NUM", "OR", "AND", "NOT", 
                                           "RELOP", "EQ", "PLUS", "MULOP", 
                                           "MINUS", "TYPE", "STRING_CONSTANT", 
                                           "ID", "WHITESPACE" ];

grammarKSLexer.prototype.ruleNames = [ "SEMI", "COMMENT", "WHILE", "LP", 
                                       "RP", "IF", "ELSE", "RETURN", "PRINT", 
                                       "INPUT", "OPEN", "CLOSE", "READ", 
                                       "WRITE", "CMA", "LBR", "RBR", "NUM", 
                                       "OR", "AND", "NOT", "RELOP", "EQ", 
                                       "PLUS", "MULOP", "MINUS", "TYPE", 
                                       "STRING_CONSTANT", "ID", "WHITESPACE" ];

grammarKSLexer.prototype.grammarFileName = "grammarKS.txt";


exports.grammarKSLexer = grammarKSLexer;

